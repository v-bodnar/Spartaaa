plugins {
    id 'org.springframework.boot' version '2.6.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.google.cloud.tools.jib' version '3.1.4'
    id 'java'
}

group = 'com.freetimers'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-rsocket'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.mapstruct:mapstruct:1.4.1.Final'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.1.Final'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'junit:junit:4.12'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.18.1'


}

test {
    useJUnitPlatform()
}

def getCheckedOutGitCommitHash() {
    def gitFolder = "$projectDir/.git/"
    def takeFromHash = 12
    /*
     * '.git/HEAD' contains either
     *      in case of detached head: the currently checked out commit hash
     *      otherwise: a reference to a file containing the current commit hash
     */
    def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
    def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
    // def isRef = head.length > 1     // ref: refs/heads/master

    if (isCommit) return head[0].trim().take(takeFromHash) // e5a7c79edabb

    def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
    refHead.text.trim().take takeFromHash
}

jib {
    from {
        image = 'openjdk:17-ea-slim-buster'
    }
    to {
        image = 'gcr.io/lucky-almanac-297122/spartacus'
        tags = [getCheckedOutGitCommitHash()]
    }
    container {
        creationTime = Instant.now().toString()
        ports = ['8080']
        user = 'nobody'
    }
    extraDirectories {
        permissions = ['/nonexistent/freetimers/spartacus/logs/spartacus.log': '777',
                       '/nonexistent/freetimers/spartacus/logs': '777',
                       '/nonexistent/freetimers/spartacus': '777',
                       '/nonexistent'                     : '777']
    }
}